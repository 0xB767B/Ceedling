#!/usr/bin/env ruby
require 'pty'

#determine platform
platform = begin
  require 'rbconfig'
  case(RbConfig::CONFIG['host_os'])
    when /mswin|mingw|cygwin/i
      :mswin
    when /darwin/
      :osx
    else
      :linux
  end
rescue
  :linux
end

#create our default meta-runner option set
options = {
  :pretend_we_are_gtest => false,
  :args => "",
  :pretest => nil,
  :outfile => nil,
  :add_path => [],
  :path_connector => (platform == :mswin) ? ";" : ":",
}

#guess that we need a special script file first if it exists
if (platform == :mswin)
  options[:pretest] = File.exists?("#{ platform.to_s }_setup.bat") ? "#{ platform.to_s }_setup.bat" : nil
else
  options[:pretest] = File.exists?("#{ platform.to_s }_setup.sh") ? "source #{ platform.to_s }_setup.sh" : nil
end

#merge in project settings if they can be found here
require 'yaml'
yaml_options = YAML.load_file('project.yml')
options[:pretend_we_are_gtest] = (yaml_options[:plugins][:enabled].include? :stdout_gtestlike_tests_report)
options[:add_path] = yaml_options[:paths][:tools] || []

#sort through command line options
args = options[:args]
ARGV.each do |v|
  case(v)
    when /--gtest/
      options[:pretend_we_are_gtest] = true
    else
      args += v + " "
  end
end

#add to the path
path = ENV["PATH"]
options[:add_path].each do |p|
  f = File.expand_path(File.dirname(__FILE__),p)
  path = (f + options[:path_connector] + path) unless path.include? f
end
ENV["PATH"] = path

#run rake and capture all the output
results = ""
ok_to_print = !(options[:pretend_we_are_gtest])
begin
  cmd = if (options[:pretest].nil? || options[:pretest].empty?)
    "rake #{args}"
  else
    "#{options[:pretest]} && rake #{args}"
  end
  PTY.spawn(cmd) do |stdout, stdin, pid|
    begin
      stdout.each do |line|
        okay_to_print = true if (options[:pretend_we_are_gtest] && line.match(/(\[==========\])/))
        line.gsub!(/(?<!\w)rake(?!\w)/,'ceed') if (args.strip == "-T")
        puts line if ok_to_print
      end
    rescue Errno::EIO
    end
  end
rescue Exception => e
  results += e.inspect unless (e == PTY::ChildExited)
end

#File.open("debug.txt",'w'){|f| f << ARGV.inspect << "\n\n" << options.inspect << "\n\n" << results }

#dump the results back out stdout unless otherwise specified
if (options[:outfile].nil?)
  puts results
else
  File.open(options[:outfile],'w') {|f| f << results }
end
